import 'package:cifraclub/extensions/string.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import 'package:cifraclub/presentation/navigator/app_navigator.dart';
import 'package:cifraclub/presentation/navigator/deep_link_parser.dart';
import 'package:cifraclub/presentation/navigator/screen_entry.dart';
import 'package:cifraclub/presentation/navigator/screen_path_parser.dart';

/// All paths generated by [restoreRouteInformation] have [ScreenPathParser.pathPrefix] as prefix.
/// Since [parseRouteInformation] receives both, deeplink url and generated paths (on state restoration, for example),
/// we can use this prefix to detect witch one was received.
class AppRouterInformationParser extends RouteInformationParser<AppNavigator> {
  final ScreenEntry firstScreen;
  final AppNavigator appNavigator;
  final ScreenPathParser screenPathParser;
  final DeepLinkParser deepLinkParser;

  AppRouterInformationParser({
    required this.firstScreen,
    required this.screenPathParser,
    required this.deepLinkParser,
    required this.appNavigator,
  });

  List<String> getPathSegmentsFromRouteInformation(RouteInformation routeInformation) {
    final location = routeInformation.location;
    if (location == null || location.isEmpty || location == "/") {
      return [];
    }
    var url = location.removePrefix(ScreenPathParser.pathPrefix);
    while (url.endsWith('/')) {
      url = url.substring(0, url.length - 1);
    }
    if (url.endsWith('.html')) {
      url = url.substring(0, url.length - 5);
    }
    if (url.endsWith('.htm')) {
      url = url.substring(0, url.length - 4);
    }
    if (url.startsWith('http://')) {
      url = url.substring(7, url.length);
    }
    if (url.startsWith('https://')) {
      url = url.substring(8, url.length);
    }
    if (url.startsWith('www.cifraclub.com.br/')) {
      url = url.substring(20, url.length);
    }

    return url.split("/").where((element) => element.isNotEmpty).toList(growable: false);
  }

  /// output example:"screenName?param1=23&param2=aew"
  String getPathSegmentFromScreenEntry(ScreenEntry entry) {
    final urlParams = StringBuffer();
    for (final value in entry.params.entries) {
      if (urlParams.isNotEmpty) {
        urlParams.write(ScreenPathParser.paramDivider);
      }
      urlParams.write("${value.key}=${value.value}");
    }
    final query = urlParams.isEmpty ? "" : "${ScreenPathParser.queryDivider}$urlParams";
    return "${entry.screenName}$query";
  }

  bool isPathSegmentsEqualToCurrentPath(List<String> uriSegments) {
    if (uriSegments.length == appNavigator.screens.length) {
      for (int sameEntriesCount = 0; sameEntriesCount < uriSegments.length; sameEntriesCount++) {
        if (uriSegments[sameEntriesCount] != getPathSegmentFromScreenEntry(appNavigator.screens[sameEntriesCount])) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  @override
  Future<AppNavigator> parseRouteInformation(RouteInformation routeInformation) {
    final uriSegments = getPathSegmentsFromRouteInformation(routeInformation);
    final isFromDeepLink = routeInformation.location?.startsWith(ScreenPathParser.pathPrefix) == false;

    if (uriSegments.isEmpty) {
      return SynchronousFuture(appNavigator..setNewState([firstScreen]));
    }

    if (uriSegments.isNotEmpty && isFromDeepLink) {
      final newScreen = deepLinkParser.parseUriSegments(uriSegments) ?? [firstScreen];
      return SynchronousFuture(appNavigator..setNewState(newScreen));
    }

    // Check if new path and current path are equal.
    // Sometimes parseRouteInformation() is called with no navigation changes.
    // This check avoids rebuild screens unnecessarily
    if (isPathSegmentsEqualToCurrentPath(uriSegments)) {
      return SynchronousFuture(appNavigator);
    }

    // Parse path and set a new navigator state
    final newScreen = screenPathParser.parsePath(uriSegments) ?? [firstScreen];
    return SynchronousFuture(appNavigator..setNewState(newScreen));
  }

  @override
  RouteInformation restoreRouteInformation(AppNavigator configuration) {
    final location = configuration.screens.map(getPathSegmentFromScreenEntry).toList(growable: false).join("/");
    return RouteInformation(location: "${ScreenPathParser.pathPrefix}$location");
  }
}
