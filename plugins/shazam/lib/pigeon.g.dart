// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class ShazamSongDto {
  ShazamSongDto({
    required this.songName,
    required this.artistName,
    this.image,
  });

  String songName;

  String artistName;

  String? image;

  Object encode() {
    return <Object?>[
      songName,
      artistName,
      image,
    ];
  }

  static ShazamSongDto decode(Object result) {
    result as List<Object?>;
    return ShazamSongDto(
      songName: result[0]! as String,
      artistName: result[1]! as String,
      image: result[2] as String?,
    );
  }
}

class ShazamResult {
  ShazamResult({
    this.result,
    this.error,
  });

  ShazamSongDto? result;

  String? error;

  Object encode() {
    return <Object?>[
      result?.encode(),
      error,
    ];
  }

  static ShazamResult decode(Object result) {
    result as List<Object?>;
    return ShazamResult(
      result: result[0] != null
          ? ShazamSongDto.decode(result[0]! as List<Object?>)
          : null,
      error: result[1] as String?,
    );
  }
}

class _ShazamHostApiCodec extends StandardMessageCodec {
  const _ShazamHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ShazamResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ShazamSongDto) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ShazamResult.decode(readValue(buffer)!);
      case 129: 
        return ShazamSongDto.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ShazamHostApi {
  /// Constructor for [ShazamHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ShazamHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ShazamHostApiCodec();

  Future<ShazamResult> search(String arg_token) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shazam.ShazamHostApi.search', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_token]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ShazamResult?)!;
    }
  }

  Future<void> cancelSearch() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.shazam.ShazamHostApi.cancelSearch', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
